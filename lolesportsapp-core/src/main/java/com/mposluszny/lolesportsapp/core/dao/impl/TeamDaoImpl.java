package com.mposluszny.lolesportsapp.core.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import org.hsqldb.lib.StringUtil;

import com.mposluszny.lolesportsapp.core.dao.GenericDAO;
import com.mposluszny.lolesportsapp.core.dao.TeamDao;
import com.mposluszny.lolesportsapp.core.model.Team;

public class TeamDaoImpl extends GenericDAO<Team> implements TeamDao {
	
	public TeamDaoImpl (Connection connection, Statement statement, PreparedStatement preparedStatement) {
		
		super(connection, statement, preparedStatement,"Team");
		ResultSet rs;
		
		try {
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			
			boolean tableExists = false;
			
			while (rs.next()) {
				
				if ("Team".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists) {
				preparedStatement =
					connection.prepareStatement("CREATE TABLE Team (idTeam BIGINT GENERATED BY DEFAULT AS IDENTITY (START WITH 1) PRIMARY KEY,"
																+ " name VARCHAR (30),"
																+ " region VARCHAR(4),"
																+ " dateOfEstablishment DATE);");
				preparedStatement.execute();
			}
			
		} catch (SQLException e) {

			e.printStackTrace();
		}
		
	}

	@Override
	public List<Team> getAllTeams() {
		
			try {
			
			statement = connection.createStatement();
			ResultSet rs = statement.executeQuery("SELECT * FROM Team;");
			List<Team> Teams = new ArrayList<Team>();
			
			while (rs.next()) {
				
				Team team = new Team(rs.getString("name"),
									 rs.getString("region"),
									 rs.getString("dateOfEstablishment"));
				team.setIdTeam(rs.getLong("idTeam"));
				Teams.add(team);
			}
			
			return Teams;
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public Team getTeamById(long idTeam) {
		
		try {
			
			statement = connection.createStatement();
			ResultSet rs = statement.executeQuery("SELECT * FROM Team WHERE idTeam=" + idTeam + ";");
		
			if (rs.next()) {
				
				Team team = new Team(rs.getString("name"),
								     rs.getString("region"),
								     rs.getString("dateOfEstablishment"));
				team.setIdTeam(rs.getLong("idTeam"));
				
				return team;
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public Team getTeamByName(String name) {
		
		try {
			
			statement = connection.createStatement();
			ResultSet rs = statement.executeQuery("SELECT * FROM Team WHERE name=\'" + name + "\';");
		
			if (rs.next()) {
				
				Team team = new Team(rs.getString("name"),
								     rs.getString("region"),
								     rs.getString("dateOfEstablishment"));
				team.setIdTeam(rs.getLong("idTeam"));
				
				return team;
			}
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
		return null;
	}

	@Override
	public void updateTeam(Team team) {
		
		try {
			
			preparedStatement = connection.prepareStatement(
											"UPDATE Team SET name=\'" + team.getName() + "\'" +
															  "region=\'" + team.getRegion() + "\'" +
															  "dateOfEstablishment=\'" + team.getDateOfEstablishment() + "\'" +
															  "WHERE idTeam=" + team.getIdTeam() + ";");
			preparedStatement.execute();
			
		} catch (SQLException e) {
			
			e.printStackTrace();
		}
		
	}

	@Override
	public void addTeam(Team team) {
				
		try {
			
			preparedStatement = connection.prepareStatement(String.format("INSERT INTO Team (NAME, REGION, DATEOFESTABLISHMENT)"
					+ " VALUES (\'%s\', \'%s\', \'%s\');", team.getName(), team.getRegion(), team.getDateOfEstablishment())); 
			preparedStatement.execute();
			
		} catch (SQLException e) {

			e.printStackTrace();
		}
		
	}

	@Override
	public boolean deleteTeam(Team team) {
				
		try {
			
			PreparedStatement updatePlayerStmt;
			
			if (!StringUtil.isEmpty(team.getName())) {
				
				Team fetchedTeam = getTeamByName(team.getName());
				updatePlayerStmt = connection.prepareStatement("UPDATE Player SET idTeam=null WHERE idTeam=" + fetchedTeam.getIdTeam() + ";");
				preparedStatement = connection.prepareStatement("DELETE FROM Team WHERE name=\'" + team.getName() + "\';");
			}
			
			else if (team.getIdTeam() != 0L) {
				
				updatePlayerStmt = connection.prepareStatement("UPDATE Player SET idTeam=null WHERE idTeam=" + team.getIdTeam() + ";");
				preparedStatement = connection.prepareStatement("DELETE FROM Team WHERE name=\'" + team.getIdTeam() + "\';");
			}
			
			else {
				
				throw new SQLException("Blad w wywolywaniu metody deleteTeam");
			}
			
			updatePlayerStmt.execute();
			preparedStatement.execute();
			return true;
			
		} catch (SQLException e) {

			e.printStackTrace();
		}
		
		return false;
		
	}

}
